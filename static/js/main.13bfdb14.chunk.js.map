{"version":3,"sources":["components/Todos.js","components/AddTodo.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","markDoneTodo","TodoList","length","map","todo","react_default","a","createElement","lib","className","key","id","onClick","e","target","task","aria-label","concat","icon","AddTodo","state","handleChange","_this","setState","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","htmlFor","type","placeholder","onChange","Component","Main","filter","classList","toggle","Date","getTime","charAt","toUpperCase","slice","Object","toConsumableArray","components_Todos","components_AddTodo","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAgDeA,UA5CD,SAAAC,GAAuC,IAArCC,EAAqCD,EAArCC,MAAOC,EAA8BF,EAA9BE,WAAYC,EAAkBH,EAAlBG,aAKzBC,EAAWH,EAAMI,OAAS,EAExBJ,EAAMK,IAAI,SAAAC,GACN,OAEIC,EAAAC,EAAAC,cAACC,EAAA,eAAD,CACIC,UAAU,2BACVC,IAAKN,EAAKO,GACVC,QAAS,SAACC,GAAD,OAAOb,EAAaa,EAAEC,UAE9BV,EAAKW,KAENV,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACIC,UAAU,4CACVO,aAAA,UAAAC,OAAsBb,EAAKW,MAC3BG,KAAK,SACLN,QAAS,kBAAMb,EAAWK,EAAKO,UAS/CN,EAAAC,EAAAC,cAAA,kCAGR,OACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,UAAU,mBACjBR,MCOFkB,qNA1CXC,MAAM,CACFL,KAAM,MAIVM,aAAe,SAACR,GACZS,EAAKC,SAAS,CAAER,KAAOF,EAAEC,OAAOU,WAIpCC,aAAe,SAACZ,GACZA,EAAEa,iBAICJ,EAAKF,MAAML,MACVO,EAAKK,MAAMC,QAAQN,EAAKF,OAI5BE,EAAKC,SAAS,CAACR,KAAM,8EAIrB,OACAV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,QAAMsB,SAAUC,KAAKL,cACjBpB,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,QAAf,gBACA1B,EAAAC,EAAAC,cAAA,SACIE,UAAU,aACVuB,KAAK,OACLrB,GAAG,OACHsB,YAAY,oBACZT,MAAOM,KAAKV,MAAML,KAClBmB,SAAUJ,KAAKT,wBArCbc,cC0DPC,qNAtDXhB,MAAM,CACFtB,MAAO,CACH,CAACa,GAAI,IAAKI,KAAM,aAChB,CAACJ,GAAI,IAAKI,KAAM,oBAOxBhB,WAAa,SAACY,GACV,IAAIb,EAAQwB,EAAKF,MAAMtB,MAAMuC,OAAO,SAAAjC,GAChC,OAAOA,EAAKO,KAAOA,IAGvBW,EAAKC,SAAS,CAACzB,aAMnBE,aAAe,SAACc,GACZA,EAAOwB,UAAUC,OAAO,mBAQ5BX,QAAU,SAACxB,GACPA,EAAKO,IAAK,IAAI6B,MAAOC,UACrBrC,EAAKW,KAAOX,EAAKW,KAAK2B,OAAO,GAAGC,cAAgBvC,EAAKW,KAAK6B,MAAM,GAChE,IAAI9C,EAAK+C,OAAAC,EAAA,EAAAD,CAAOvB,EAAKF,MAAMtB,OAAlBmB,OAAA,CAAyBb,IAClCkB,EAAKC,SAAS,CAACzB,mFAIf,OACAO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAACwC,EAAD,CACIjD,MAAOgC,KAAKV,MAAMtB,MAClBC,WAAY+B,KAAK/B,WACjBC,aAAc8B,KAAK9B,eAEvBK,EAAAC,EAAAC,cAACyC,EAAD,CACIpB,QAASE,KAAKF,kBA/CXO,cCOJc,mLARX,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,cAJUf,aCSEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13bfdb14.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Collection, CollectionItem, Button} from 'react-materialize'\r\nimport '../styles/Todos.css'\r\n\r\nconst Todos = ({todos, deleteTodo, markDoneTodo}) => {\r\n        \r\n    //check todos state length todos.length > 0 ?\r\n    //if true display todos list\r\n    //if false display a message 'There are no todos!'\r\n    const TodoList = todos.length > 0 ?\r\n            ( \r\n            todos.map(todo => {\r\n                return(\r\n                    //pass id of clicked back to parent component as action\r\n                    <CollectionItem \r\n                        className=\"todo-item valign-wrapper\" \r\n                        key={todo.id} \r\n                        onClick={(e) => markDoneTodo(e.target)}>\r\n\r\n                        {todo.task} \r\n\r\n                        <Button \r\n                            className=\"btn-floating transparent remove-btn small\" \r\n                            aria-label={`remove ${todo.task}`} \r\n                            icon=\"remove\" \r\n                            onClick={() => deleteTodo(todo.id)} \r\n                        />\r\n\r\n                    </CollectionItem>\r\n                )\r\n                \r\n            })\r\n            \r\n        ) : (\r\n            <div>There are no todos!</div>\r\n        )\r\n    \r\n    return(\r\n        <div>\r\n            <h3>Todo's List</h3>\r\n            <Collection className=\"todo-collection\">\r\n                {TodoList}\r\n            </Collection>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport '../styles/AddTodo.css'\r\n\r\nclass AddTodo extends Component {\r\n\r\n    // task state to hold\r\n    state={\r\n        task: ''\r\n    }\r\n\r\n    // handle input change\r\n    handleChange = (e) => {\r\n        this.setState({ task : e.target.value})\r\n    }\r\n\r\n    // handle form submit by user click enter\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // pass new todo back as action to parent component <Main />\r\n        // only if user enter data and task state not empty\r\n        if(this.state.task) {\r\n            this.props.addTodo(this.state);\r\n        }\r\n        \r\n        // clear input after user submit\r\n        this.setState({task: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"todo-form\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">Add New Todo</label>\r\n                <input \r\n                    className=\"todo-input\"\r\n                    type=\"text\" \r\n                    id=\"task\"\r\n                    placeholder=\"Start typing here\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from 'react';\r\nimport Todos from './Todos'\r\nimport AddTodo from './AddTodo'\r\nimport '../styles/Main.css'\r\n\r\n\r\nclass Main extends Component {\r\n    state={\r\n        todos: [\r\n            {id: '1', task: 'Buy bread'},\r\n            {id: '2', task: 'Cleans rooms'},\r\n        ]\r\n    }\r\n\r\n    //handle user click to delete a todo\r\n    //get todo id to remove from list\r\n    //update state with new todos after user click\r\n    deleteTodo = (id) => {\r\n        let todos = this.state.todos.filter(todo => {\r\n            return todo.id !== id;\r\n        });\r\n\r\n        this.setState({todos});\r\n    }\r\n\r\n\r\n    //handle user click to mark todo as done\r\n    //using classList.toggle to add a line if done or remove line if not done\r\n    markDoneTodo = (target) => {\r\n        target.classList.toggle(\"line-through\");\r\n    }\r\n\r\n    //add new todo to state\r\n    //generate a unique id for new todo\r\n    //capitalize first letter of new todo enterd by user\r\n    //make copy ot todos state to use it to modify state indirectly\r\n    //update todos state\r\n    addTodo = (todo) => {\r\n        todo.id = new Date().getTime();\r\n        todo.task = todo.task.charAt(0).toUpperCase() + todo.task.slice(1);\r\n        let todos = [...this.state.todos, todo];\r\n        this.setState({todos})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"todos-container\">\r\n            <Todos\r\n                todos={this.state.todos}\r\n                deleteTodo={this.deleteTodo}\r\n                markDoneTodo={this.markDoneTodo}\r\n            />\r\n            <AddTodo\r\n                addTodo={this.addTodo}\r\n            />\r\n            \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport Main from './components/Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//add core.js to support map array method for old browsers\n// https://reactjs.org/docs/javascript-environment-requirements.html\nimport 'core-js/library/es6/map';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}